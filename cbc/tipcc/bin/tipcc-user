#!/usr/bin/env bash
### UCSF HPC TIPCC:
### Detailed user information
###
### Usage:
###  tipcc-user [options] <user>
###
### Options:
###  --list              List all users
###  --jobs              List cluster jobs / tasks
###  --master            List processes on master 
###  --disk-usage        List disk usage (slow)
###  --all               As --jobs --master --disk-usage
###  --most              As --all without --disk-usage
###  --help              This help
###
###  <user>              Specify user (default: \$USER)
###  --user <user>       (deprecated alternative)
###
### Example:
###  tipcc-user
###  tipcc-user alice
###
### Version: 0.1.0-9000
### Copyright: Henrik Bengtsson (2016-2017)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"
tool_name=$(basename $0)
if [[ ${TIPCC_TOOLS} -ne 0 ]]; then
    tool_name=${tool_name/-/ }
fi

function mecho() { echo "$@" 1>&2; }

function merror() {
    mecho "ERROR in '${tool_name}': $*"
    exit 1
}
function mwarn() {
    mecho "WARNING in '${tool_name}': $*"
}

function as_logical() {
    if [[ $1 == "false" || $1 == "0" ]]; then echo 0; else echo 1; fi
}

function help() {
    local res=$(grep -E "^###( .*|)$" $0 | cut -b 5-)
    local search=$(basename $0)
    if [[ "${search}" != "${tool_name}" ]]; then
        res=$(printf '%s\n' "${res[@]}" | sed "s/${search}/${tool_name}/g")
    fi
    printf '%s\n' "${res[@]}"
}

function whatis() {
    local res=$(grep "^### .*[^:][[:space:]]*$" $0 | head -1 | cut -b 5-)
    printf '%s\n' "${res[@]}"
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" $0 | sed 's/###[ ]*Version:[ ]*//g'
}

function all_users() {
  cat /etc/passwd | grep -F "/home/" | grep -E "(@|inactive)" | cut -d':' -f1 | sort -u
}

function user_info() {
    local user=$1
    local uid=$(id -u $user)
    local info=$(grep -E "^$user:" /etc/passwd | cut -d: -f5)
    local groups=$(groups $user | sed 's/.*:[ ]*//g')
    echo "$user [$info, UID $uid, GROUPS $groups]:"
}

user=${USER}
moab=1
jobs=1
master=1
disk_usage=0

# Parse command-line options
while [[ $# > 0 ]]; do
    if [[ "$1" == "--help" ]]; then
        help
        exit 0
    elif [[ "$1" == "--whatis" ]]; then
        whatis
        exit 0
    elif [[ "$1" == "--version" ]]; then
        version
        exit 0
    elif [[ "$1" == "--list" ]]; then
        all_users
	exit 0
    elif [[ "$1" == "--me" ]]; then
        user=${USER}
    elif [[ "$1" == "--jobs" ]]; then
        jobs=1
    elif [[ "$1" == "--master" ]]; then
        master=1
    elif [[ "$1" == "--head" ]]; then
	## Backward compatible
        master=1
    elif [[ "$1" == "--disk-usage" ]]; then
        disk_usage=1
    elif [[ "$1" == "--moab" ]]; then
        moab=1
    elif [[ "$1" == "--most" ]]; then
        jobs=1
        master=1
        moab=1
    elif [[ "$1" == "--all" ]]; then
        jobs=1
        master=1
        moab=1
        disk_usage=1
    elif [[ "$1" == "--user" ]]; then
        shift
        user=$1
	mwarn "--user <user> is deprecated; use only <user> instead"
    else
        user=$1
    fi
    shift
done

filter=$(as_logical $filter)


## Identify user
id=$(id $user 2> /dev/null)

## No such user?
if [[ $? -ne 0 ]]; then
    ## Maybe the email address and the personal name was specified?
    ## Try free-text search the 'name (email)' field of /etc/passwd
    info=$(cut -d: -f3,5 /etc/passwd | grep -i -F $user)

    ## No match?
    if [[ $? -ne 0 ]]; then
        merror "No such user (also searched person's name, email address and UID): '${user}'"
    fi
    
    ## Multiple matches?
    ncount=$(printf '%s\n' "${info[@]}" | wc -l)
    if [[ ${ncount} != 1 ]]; then
        printf '%s\n' "${info[@]}" 1>&2;
        merror "Found ${ncount} matches. Please use a more specific search string: '${user}'"
    fi

    ## Extract 'user' information for the unique match
    line=$(cut -d: -f3,5 /etc/passwd | grep -n -i -F $user | cut -d: -f1)
    user=$(sed "${line}q;d" /etc/passwd | cut -d: -f1)

    ## Re-assert user exists (should always work)
    id=$(id $user 2> /dev/null)
    if [[ $? -ne 0 ]]; then   
        merror "No such user: $user"
    fi
fi

if [[ $? -ne 0 ]]; then   
    merror "No such user: $user"
fi


## Display user information
info=$(grep -E "^$user:" /etc/passwd | cut -d: -f5)
fullname=$(echo $info | sed 's/[ ]*[(].*//')
email=$(echo $info | sed -E 's/.*[(](.*)[)]/\1/')
home=$(grep -E "^$user:" /etc/passwd | cut -d: -f6)
shell=$(grep -E "^$user:" /etc/passwd | cut -d: -f7)


## Information about user
echo "Username        : $user"
echo "UID             : $(id -u $user)"
echo "Groups          : $(id $user | sed 's/.*groups=//' | sed 's/,/, /g')"
echo "Primary group   : $(id -gn $user)"
echo "Name            : $fullname"
echo "Email           : $email"
echo "Home directory  : $home"
echo "Shell           : $shell"
echo "Last login      : $(finger $user | grep -E '(Last login|On since)' | sed 's/Last login *//g' | head -1)"

## Moab information
if [[ $moab -eq 1 ]]; then
    config_file="/opt/moab/etc/moab.cfg"
    pattern="[^a-zA-Z]($(id -Gn $user | sed 's/ /|/g'))([^a-zA-Z]|$)"
    grep -qE "(${pattern})" "$config_file"
    res=$(grep -E "(${pattern})" "$config_file" | grep -vE "^#" | grep -vE '^[[:space:]]*$' | sed 's/^/ - /g')
    if [[ -z "${res[@]}" ]]; then
        echo "Moab privileges ($config_file): <none>"
    else
        echo "Moab privileges ($config_file):"
        printf '%s\n' "${res[@]}"
    fi
fi

## Jobs
if [[ $jobs -eq 1 ]]; then
    echo "Cluster tasks   : $(qme $user | grep -F "Number of tasks:" | sort -u | sed 's/Number of tasks: //g')"
    nodes=$(qstat -f -u $user | grep -F "exec_host = " | sed -E 's/.*exec_host = //')
    nodes=($(echo $nodes | sed -E 's|/[0-9]+||g' | sed 's/+/\n/g' | sed 's/ /\n/g' | sort -u))
    echo "Compute nodes   : ${nodes[@]}"
fi

## Processes on master
if [[ $master -eq 1 ]]; then
    res=$(tipcc-master --user $user | grep -E "^PIDs" | sed 's/.*: //g')
    if [[ $(echo $res | grep -E "^PIDs:") ]]; then
        echo "PIDs on master  : $res"
    else
        echo "PIDs on master  : <none>"
    fi
fi

## Disk usage
if [[ $disk_usage -eq 1 ]]; then
    echo "Disk usage      :"
    for path in $home /data/$user/ /work/$user/; do
       printf " - "
       if [[ -d $path ]]; then
           du -sh $path
       fi
    done
    echo
fi



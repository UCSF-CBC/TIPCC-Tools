#!/usr/bin/env bash
### Creates mom_priv/config.{{node}} files from template
###
### Usage:
### tipcc-torque-config <config-tmpl-file>
###
### Version: 0.0.9-9000
### Copyright: Henrik Bengtsson (2017-2018)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"
tool_name=$(basename $0)
if [[ ${TIPCC_TOOLS} -ne 0 ]]; then
    tool_name=${tool_name/-/ }
fi

function mecho() { echo "$@" 1>&2; }

function merror() {
    mecho "ERROR in '${tool_name}': $*"
    exit 1
}

function help() {
    local res=$(grep -E "^###( .*|)$" $0 | cut -b 5-)
    local search=$(basename $0)
    if [[ "${search}" != "${tool_name}" ]]; then
	res=$(printf '%s\n' "${res[@]}" | sed "s/${search}/${tool_name}/g")
    fi
    printf '%s\n' "${res[@]}"
}

function whatis() {
    local res=$(grep "^### .*[^:][[:space:]]*$" $0 | head -1 | cut -b 5-)
    printf '%s\n' "${res[@]}"
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" $0 | sed 's/###[ ]*Version:[ ]*//g'
}

tmpl_file=

# Parse command-line options
while [[ $# > 0 ]]; do
    if [[ "$1" == "--help" ]]; then
	help
	exit 0
    elif [[ "$1" == "--whatis" ]]; then
	whatis
	exit 0
    elif [[ "$1" == "--version" ]]; then
	version
	exit 0
    else
	tmpl_file=$1
    fi
    shift
done

if [[ -z ${tmpl_file} ]]; then
    help
    exit 1
elif [[ ! -f ${tmpl_file} ]]; then
    merror "No such template file: ${tmpl_file}"
fi

tmpl=$(cat ${tmpl_file})

FIRST_NODE=${FIRST_NODE:-0}
LAST_NODE=${LAST_NODE:-38}
for node in $(seq $FIRST_NODE $LAST_NODE); do
    printf "Node %d: " ${node}  

    scratch_size=$(bpsh -s ${node} df -P -k /scratch/ 2> /dev/null)
    if [ ! $? -eq 0 ]; then
      node_name=n${node}
      scratch_size=$(ssh ${node_name} df -P -k /scratch/ 2> /dev/null)
      if [ ! $? -eq 0 ]; then
	  echo "down; skipping"
	  continue
      fi
    fi
    scratch_size=$(echo "${scratch_size}" | grep -F /scratch  | awk '{ print int($2 / 1024^2) }')
    printf '/scratch = %d (GiB)' ${scratch_size}

    ## Inject into template
    out=("${tmpl[@]/\{\{scratch\}\}/${scratch_size}}")

    ## Write node-specific config file
    out_file=config.${node}
    printf '%s\n' "${out[@]}" > ${out_file}

    printf " [%s]\n" ${out_file}
done


#!/usr/bin/env bash
### Cluster status summary
###
### Usage:
###  tipcc-status [options]
###
### Options:
###  --backup            Report on backup status
###  --disk-space        Report on disk usage on /data, /home, and /work
###  --local-scratch     Report on local /scratch usage on compute nodes
###  --local-tmp         Report on local /tmp usage on compute nodes
###  --master            Report on processes on the master node
###  --nodes             Report on statuses on compute nodes
###  --scheduler         Report on job scheduler status
###  --uptime            Report on uptime and vm stats
###  --help              This help
###
### Example:
###  tipcc-status        # all sections by default
###
### Version: 0.1.0-9000
### Copyright: Henrik Bengtsson (2016-2020)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"
tool_name=$(basename $0)
if [[ ${TIPCC_TOOLS} -ne 0 ]]; then
    tool_name=${tool_name/-/ }
fi

red=$(tput setaf 1 2> /dev/null)
yellow=$(tput setaf 3 2> /dev/null)
reset=$(tput sgr0 2> /dev/null)

function mecho() { echo "$@" 1>&2; }

function merror() {
    mecho "ERROR in '${tool_name}': $*"
    exit 1
}

function as_logical() {
    if [[ $1 == "false" || $1 == "0" ]]; then echo 0; else echo 1; fi
}

function help() {
    local res=$(grep -E "^###( .*|)$" $0 | cut -b 5-)
    local search=$(basename $0)
    if [[ "${search}" != "${tool_name}" ]]; then
        res=$(printf '%s\n' "${res[@]}" | sed "s/${search}/${tool_name}/g")
    fi
    printf '%s\n' "${res[@]}"
}

function whatis() {
    local res=$(grep "^### .*[^:][[:space:]]*$" $0 | head -1 | cut -b 5-)
    printf '%s\n' "${res[@]}"
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" $0 | sed 's/###[ ]*Version:[ ]*//g'
}

## Cluster functions
function on_compute_node() {
    pbsnodes ${HOSTNAME} &> /dev/null
    echo $?
}

sections_default="nodes disk_space local_scratch local_tmp scheduler uptime processes_on_master backup"
sections=
local_disk=false
full=0

# Parse command-line options
while [[ $# > 0 ]]; do
    if [[ "$1" == "--help" ]]; then
        help
        exit 0
    elif [[ "$1" == "--whatis" ]]; then
        whatis
        exit 0
    elif [[ "$1" == "--version" ]]; then
        version
        exit 0
    elif [[ "$1" == "--local-disk" ]]; then
        local_disk=true
    elif [[ "$1" == "--full" ]]; then
        full=1
    elif [[ "$1" == "--backup" ]]; then
        sections="$sections backup"
    elif [[ "$1" == "--disk-space" ]]; then
        sections="$sections disk_space"
    elif [[ "$1" == "--local-scratch" ]]; then
        sections="$sections local_scratch"
    elif [[ "$1" == "--local-tmp" ]]; then
        sections="$sections local_tmp"
    elif [[ "$1" == "--master" ]]; then
        sections="$sections processes_on_master"
    elif [[ "$1" == "--nodes" ]]; then
        sections="$sections nodes"
    elif [[ "$1" == "--scheduler" ]]; then
        sections="$sections scheduler"
    elif [[ "$1" == "--uptime" ]]; then
        sections="$sections uptime"
    else
        extras="$extras $1"
    fi
    shift
done

if [[ -z "$sections" ]]; then
    sections=$sections_default
fi

echo "# Cluster status ($(date '+%Y-%m-%d %k:%M:%S %Z'))"
echo

if [[ "$sections" == *nodes* ]]; then
  echo "## Nodes"
  echo
  echo "### According to 'bpstat' (Scyld)"
  bpstat
  echo
  echo "### According to 'pbsnodes -l' (TORQUE)"
  bfr=$(pbsnodes -l)
  bfr=$(echo "$bfr" | sed -E 's/(.*)down$/'$red'\1down'$reset'/g')
  echo "$bfr"
  echo
  pbsnodes | grep -q -F "ERROR" > /dev/null
  if [[ $? -eq 0 ]]; then
    echo "## ERROR: Problematic nodes"
    printf "%s" "$red"
    pbsnodes | grep -B 7 -A 2 -F "ERROR" | grep -E "^(n[0-9]+|[[:space:]]+status = )"
    printf "%s" "$reset"
    echo
  fi
fi

if [[ "$sections" == *disk_space* ]]; then
  echo "## Disk space"
  df -P -h /home /data /work /tmp | sed 's/ [/]$/ \/     (=\/tmp)/g'
  echo
fi

if [[ "$sections" == *local_scratch* ]]; then
  echo "## Local /scratch usage"
  disk_log=~monitor/logs/today/nodes/disk_space-scratch.log
  if [ -f "$disk_log" ]; then bfr=$(sed '/NODES:/h;//!H;$!d;x' "$disk_log" | grep -E "(^NODE |/scratch$)" | tr $'\n' ':' | sed 's| /scratch|\n|g' | grep -v -E "^:$" | sed -E 's/^(|:)NODE //g' | sed -E 's/::[^ ]+[ ]+/ /g' | sed -E 's/::[ ]+/ /g' | awk '{ use=$3/1024; avail=$4/1024; total=$2/1024; printf("%3s: %7.1f GiB (%4s) of %7.1f GiB\n", $1, use, $5, total) }')
      bfr=$(echo "$bfr" | sed -E 's/(.*)\(( 9[0-9]|100)%\)(.*)/'$red'\1(\2%)\3'$reset'/g')
      echo "$bfr"
  else
      echo "Not available"
  fi
  echo
fi

if [[ "$sections" == *local_tmp* ]]; then
  echo "## Local /tmp usage"
  disk_log=~monitor/logs/today/nodes/disk_space-tmp.log
  if [ -f "$disk_log" ]; then
      bfr=$(sed '/NODES:/h;//!H;$!d;x' "$disk_log" | grep -E "(^NODE |/$)" | tr $'\n' ':' | sed 's| /|\n|g' | grep -v -E "^:$" | sed -E 's/^(|:)NODE //g' | sed -E 's/::[^ ]+[ ]+/ /g' | sed -E 's/::[ ]+/ /g' | awk '{ use=$3/1024; avail=$4/1024; total=$2/1024; printf("%3s: %7.1f GiB (%4s) of %7.1f GiB\n", $1, use, $5, total) }')
      bfr=$(echo "$bfr" | sed -E 's/(.*)\(( 9[0-9]|100)%\)(.*)/'$red'\1(\2%)\3'$reset'/g')
      echo "$bfr"
  else
      echo "Not available"
  fi
  echo
fi

if [[ "$sections" == *scheduler* ]]; then
  echo "## Job scheduler"
  echo
  echo "### Moab"
  if [[ $(on_compute_node) -eq 0 ]]; then
      echo "Moab status: <only available from master, not from ${HOSTNAME}>"
  else
      PATH="/sbin:$PATH"  ## AD HOC: 'service' might not be on PATH
      status=$(service moab status)
      res=$?
      if [[ $res -eq 0 ]]; then
          echo "Moab status: $status (exit code $res)"
      else
          printf "%s" "$red"
          echo "Moab status: $status (exit code $res)"
          printf "%s" "$reset"
      fi
  fi
  echo
  echo "### TORQUE / PBS"
  if [[ $(on_compute_node) -eq 0 ]]; then
    echo "PBS Server: <only available from master, not from ${HOSTNAME}>"
    echo "PBS Authentication Daemon: <only available from master, not from ${HOSTNAME}>"
  else
    echo "PBS Server: $(service pbs_server status)"
    echo "PBS Authentication Daemon (on master & compute nodes): $(service pbs_trqauthd status)"
  fi
  echo "PBS Queue:"
  jobs=$(qstat | grep -E "^[0-9]+")
  jobsx=$(qstat -t | grep -E "^[0-9]+")
  echo "Number of jobs: $(echo "${jobs[0]}" | wc -l) ($(echo "${jobs[0]}" | grep -F ' R ' | wc -l) running, $(echo "${jobs[0]}" | grep -F ' Q ' | wc -l) queued)"
  echo "Number of individual jobs: $(echo "${jobsx[0]}" | wc -l) ($(echo "${jobsx[0]}" | grep -F ' R ' | wc -l) running, $(echo "${jobsx[0]}" | grep -F ' Q ' | wc -l) queued)"
  echo "Users: [$(echo "${jobs[0]}" | awk '{ print $3 }' | sort -u | wc -l)] $(echo "${jobs[0]}" | awk '{ print $3 }' | sort -u | tr $'\n' ' ')"
  
  echo
fi

if [[ "$sections" == *uptime* ]]; then
  echo "## Uptime and vmstat"
  echo "$HOSTNAME: $(uptime)"
  vmstat | sed 's/free/ free/' | sed 's/cache/   cache/' | sed 's/-memory-/---memory---/'
  if [[ "$full" != "0" ]]; then
    vmstat -s -S M
  fi
fi
 
    
if [[ "$sections" == *processes_on_master* ]]; then
  if [[ $(on_compute_node) -ne 0 ]]; then
      echo
      echo "### High-memory processes"
      TIPCC_TOOLS=0 tipcc-master --himem
      echo
      echo "### High-CPU processes"
      TIPCC_TOOLS=0 tipcc-master --hicpu
      echo
  fi
fi


if [[ "$sections" == *backup* ]]; then
  echo "## Backup"
  echo
  echo "### Weekly rsync"
  echo
  if ping -c 1 -W 1 ccls04 > /dev/null; then
  for backup_log in /backup/home/home_backup.log; do
    ## Completed?
    if grep -q -F status "$backup_log"; then  
        status_line=$(grep -F status "$backup_log" | sed 's/.*Job/Job/g')
        status=$(echo $status_line | sed -E 's/.*status[[:space:]]*=[[:space:]]*([[:digit:]]+).*/\1/g')
        too_old=$(find $backup_log -mtime +7 | wc -l)
        if [ $status -eq 0 ] && [ $too_old -eq 0 ]; then
            stat --printf="Last run: %y (%n %s bytes)\n" "$backup_log"
            echo "Status: $status_line"
        else
            printf "%s" "$red"
            stat --printf="Last run: %y (%n %s bytes)\n" "$backup_log"
            echo "Status: $status_line"
            printf "%s" "$reset"
        fi
    else
        printf "$yellow"
        stat --printf="Currently running: %y (%n %s bytes)\n" "$backup_log"
	tail -n 1 "$backup_log"
        printf "%s" "$reset"
    fi
  done
  echo
  ## Rsync backup storage
  df -P -h /backup
  echo
  else
      echo "${red}ERROR: /backup file server ccls04 is not responding${reset}"
  fi
fi

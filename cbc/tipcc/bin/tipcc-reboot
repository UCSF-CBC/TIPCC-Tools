#!/usr/bin/env bash
### TIPCC Compute Node Rebooting
###
### Usage:
###  tipcc-reboot [options] <node>
###
### Options:
###  --ipmi     Reboot node using IPMI
###  --debug    Output debug information
###  --verbose  Output exta information
###  --dryrun   Do nothing - just show what would be done
###  --help     Show this help
###
### Example:
###  tipcc-reboot --verbose --ipmi n13
###
### Version: 0.0.0-9000
### Copyright: Henrik Bengtsson (2020)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"
tool_name=$(basename $0)
if [[ ${TIPCC_TOOLS} -ne 0 ]]; then
    tool_name=${tool_name/-/ }
fi



debug=false
theme=${TIPCC_THEME:-cli}


# -------------------------------------------------------------------------
# Output utility functions
# -------------------------------------------------------------------------
function _tput() {
    if [[ $theme == "none" ]]; then
	return
    fi
    tput "$@" 2> /dev/null
}

function mecho() { echo "$@" 1>&2; }

function mdebug() {
    if ! $debug; then
        return
    fi
    {
        _tput setaf 8 ## gray
        echo "DEBUG: $*"
        _tput sgr0    ## reset
    } 1>&2
}

function merror() {
    local info version
    {
        _tput setaf 1 ## red
        echo "ERROR: $*"
        _tput sgr0    ## reset
    } 1>&2
    _exit 1
}

function mwarn() {
    {
        _tput setaf 3 ## yellow
        echo "WARNING: $*"
        _tput sgr0    ## reset
    } 1>&2
}

function minfo() {
    if ! $verbose; then
        return
    fi
    {
        _tput setaf 4 ## blue
        echo "INFO: $*"
        _tput sgr0    ## reset
    } 1>&2
}

function mok() {
    {
        _tput setaf 2 ## green
        echo "OK: $*"
        _tput sgr0    ## reset
    } 1>&2
}

function mdeprecated() {
    {
        _tput setaf 3 ## yellow
        echo "DEPRECATED: $*"
        _tput sgr0    ## reset
    } 1>&2
}

function _exit() {
    local value
    
    value=${1:-0}
    mdebug "Exiting with exit code $value"
    exit "$value"
}


# -------------------------------------------------------------------------
# CLI utility functions
# -------------------------------------------------------------------------
function help() {
    local res=$(grep -E "^###( .*|)$" $0 | cut -b 5-)
    local search=$(basename $0)
    if [[ "${search}" != "${tool_name}" ]]; then
        res=$(printf '%s\n' "${res[@]}" | sed "s/${search}/${tool_name}/g")
    fi
    printf '%s\n' "${res[@]}"
}

function whatis() {
    local res=$(grep "^### .*[^:][[:space:]]*$" $0 | head -1 | cut -b 5-)
    printf '%s\n' "${res[@]}"
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" $0 | sed 's/###[ ]*Version:[ ]*//g'
}


# -------------------------------------------------------------------------
# Sudo tools
# -------------------------------------------------------------------------
function assert_sudo() {
    local cmd

    cmd=$1
    
    if sudo -v -n 2> /dev/null; then
        mdebug "'sudo' is already active"
	minfo "Administrative (\"sudo\") rights already establish"
	return
    fi
    mdebug "'sudo' is not active"

    if [[ -n $cmd ]]; then
        if [[ ${TIPCC_TOOLS} == "true" ]]; then
	    cmd=" ('tipcc reboot $cmd')"
	else
	    cmd=" ('tipcc-reboot $cmd')"
	fi
    fi
    
    {
        mwarn "This action$cmd requires administrative (\"sudo\") rights."
        _tput setaf 11  ## bright yellow
	sudo -v -p "Enter the password for your account ('$USER') on your local computer ('$HOSTNAME'): "
#        _tput setaf 15  ## bright white
        _tput sgr0      ## reset
    } 1>&2

    ## Assert success
    if ! sudo -v -n 2> /dev/null; then
        merror "Failed to establish 'sudo' access. Please check your password. It might also be that you do not have administrative rights on this machine."
    fi

    minfo "Administrative (\"sudo\") rights establish"
}    


function assert_continue() {
    local value

    while [ -z $value ]; do
	{
            _tput setaf 11  ## bright yellow
            printf "Are you sure you want to continue [y/n]: "
            _tput setaf 15  ## bright white
            read -r value
            _tput sgr0      ## reset
	} 1>&2
        value=${value/ /}
	if [[ $value == "yes" ]]; then value="y"; fi
	if [[ $value == "no" ]]; then value="n"; fi
        if [[ $value != "y" && $value != "n" ]]; then value=; fi
    done
    mdebug "- Answer=$value"
    if [[ $value == "y" ]]; then return 0; fi
    return 1
}


# -------------------------------------------------------------------------
# Job and process function
# -------------------------------------------------------------------------
function assert_ping() {
    if ping -c 1 "$node_label" > /dev/null; then
	return 0
    else
	return 1
    fi
}

function assert_no_jobs() {
    if qstat -n -t -1 | grep -q -E "$node_label/"; then
	return 1
    else
	return 0
    fi
}

function assert_no_processes() {
     if ps uax | bpstat -P | grep -v -E " (nscd|postfix|root|rpc|rpcuser) " | cut -d ' ' -f 1 | grep -q -E "^$node "; then
	return 1
    else
	return 0
    fi
}


# -------------------------------------------------------------------------
# IPMI functions
# -------------------------------------------------------------------------
function assert_ipmi_username() {
    local value
    
    ## Nothing to do?
    [[ -n $IPMI_USERNAME ]] && return

    mdebug "PROMPT: Asking for IPMI username"
    while [ -z $value ]; do
	{
            _tput setaf 11  ## bright yellow
            printf "Enter IPMI username: "
            _tput setaf 15  ## bright white
            read -r value
            _tput sgr0      ## reset
	} 1>&2
        value=${value/ /}
    done
    IPMI_USERNAME=$value
    mdebug "- IPMI_USERNAME=$IPMI_USERNAME"
    export IPMI_USERNAME
}

function assert_ipmi_password() {
    local value
    
    ## Nothing to do?
    [[ -n $IPMI_PASSWORD ]] && return

    mdebug "PROMPT: Asking for IPMI password"
    while [ -z $value ]; do
	{
            _tput setaf 11  ## bright yellow
            printf "Enter IPMI password: "
            _tput setaf 15  ## bright white
            read -s -r value
            _tput sgr0      ## reset
	} 1>&2
        value=${value/ /}
    done
    echo
    IPMI_PASSWORD=$value
    mdebug "- IPMI_PASSWORD=<hidden>"
    export IPMI_PASSWORD
}


function assert_ipmi() {
    [[ -z $IPMI_USERNAME ]] && merror "IPMI username not set"
    [[ -z $IPMI_PASSWORD ]] && merror "IPMI password not set"
    cmd="ipmitool -H '${node_label}-ipmi' -U '$IPMI_USERNAME' -E power status"
    mdebug "Call: $cmd"
    bfr=$(eval "$cmd")
    res=$?
    mdebug "Result: $res"
    [[ $res -ne 0 ]] && merror "Failed to check IPMI power status for $node_label"
    mok "IPMI works on $node_label (node responded '$bfr')"
}

function ipmi_reboot() {
    local ans
    
    assert_ipmi_username
    assert_ipmi_password
    assert_ipmi
    
    cmd="ipmitool -H '${node_label}-ipmi' -U '$IPMI_USERNAME' -E power cycle"
    mdebug "Call: $cmd"

    if $dryrun; then
	mecho "DRYRUN: $cmd"
	return
    fi
    
    if ! assert_continue; then
        mwarn "User decided to skip the reboot of $node_label"
	return 1
    fi

    minfo "Rebooting $node_label ..."
    bfr=$(eval "$cmd")
    res=$?
    [[ -n $bfr ]] && minfo "Node $node_label: $bfr"
    mdebug "Result: $res"
    [[ $res -ne 0 ]] && merror "Failed to IPMI power cycle $node_label"
    mok "IPMI rebooted $node_label (node responded '$bfr')"
    mwarn "Rebooted nodes typically respond to ping within a few minutes but may take up to 10 minutes to be available on the scheduler"
}


# -------------------------------------------------------------------------
# Miscellaneous
# -------------------------------------------------------------------------
function as_logical() {
    if [[ $1 == "false" || $1 == "0" ]]; then echo 0; else echo 1; fi
}



node=
ipmi=false
dryrun=false
debug=false
verbose=false
force=false

# Parse command-line options
while [[ $# > 0 ]]; do
    if [[ "$1" == "--dryrun" ]]; then
        dryrun=true
    elif [[ "$1" == "--force" ]]; then
        force=true
    elif [[ "$1" == "--debug" ]]; then
        debug=true
    elif [[ "$1" == "--verbose" ]]; then
        verbose=true
    elif [[ "$1" == "--ipmi" ]]; then
        ipmi=true
    elif [[ "$1" == "--help" ]]; then
        help
        exit 0
    elif [[ "$1" == "--whatis" ]]; then
        whatis
        exit 0
    elif [[ "$1" == "--version" ]]; then
        version
        exit 0
    else
        node="$1"
    fi
    shift
done

## Drop prefix n, e.g. 'n13' -> '13'
node=$(echo "$node" | sed -E 's/^n//g')

if [[ -z "$node" ]]; then
    help
    mecho
    merror "Argument --node <node number> must be specified, e.g. --node 13"
fi


node_label="n${node}"
echo "# Node ${node}: Rebooting"
date +"on %Y-%m-%d %H:%M:%S"
echo


assert_no_jobs || merror "Cannot reboot node: there are jobs running on $node_label according to qstat"
mok "There are no jobs running on $node_label"
assert_no_processes || merror "Cannot reboot node: there are user processes running on $node_label"
mok "There are no user processes running on $node_label"

assert_ping || merror "Cannot reboot node: Node $node_label does not answer to pings"
mok "Node $node_label answers to pings"

if ! $dryrun; then
    assert_sudo
fi    


## Use IPMI?
if $ipmi; then
    echo " - Method: IPMI"
    ipmi_reboot
fi

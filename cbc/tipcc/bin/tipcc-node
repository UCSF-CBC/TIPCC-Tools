#!/usr/bin/env bash
### UCSF HPC TIPCC:
### Post-mortem summaries
###
### Usage:
###  tipcc-node <node> [options]
###
### Options:
###  --status            Report on ping, bpstat, and pbsnodes (default)
###  --no-status         or not
###  --disk              Report on local disk (/tmp and /scratch) usage
###  --no-disk           or not (default)
###  --full              Report on full job details (qstat -f)
###  --no-full           or not (default)
###  --logs              Report on system logs (/var/log/messages)
###  --no-logs           or not (default)
###  --privs             Report on access privileges (/opt/moab/etc/moab.cfg) (default)
###  --no-privs          or not
###  --help              This help
###
### Example:
###  tipcc-node n13
###
### Version: 0.1.0-9000
### Copyright: Henrik Bengtsson (2017)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"
tool_name=$(basename $0)
if [[ ${TIPCC_TOOLS} -ne 0 ]]; then
    tool_name=${tool_name/-/ }
fi

function mecho() { echo "$@" 1>&2; }

function merror() {
    mecho "ERROR in '${tool_name}': $*"
    exit 1
}

function as_logical() {
    if [[ $1 == "false" || $1 == "0" ]]; then echo 0; else echo 1; fi
}

function help() {
    local res=$(grep -E "^###( .*|)$" $0 | cut -b 5-)
    local search=$(basename $0)
    if [[ "${search}" != "${tool_name}" ]]; then
        res=$(printf '%s\n' "${res[@]}" | sed "s/${search}/${tool_name}/g")
    fi
    printf '%s\n' "${res[@]}"
}

function whatis() {
    local res=$(grep "^### .*[^:][[:space:]]*$" $0 | head -1 | cut -b 5-)
    printf '%s\n' "${res[@]}"
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" $0 | sed 's/###[ ]*Version:[ ]*//g'
}


path=reports
debug=false
node=
status=true
disk=false
full=false
logs=false
privs=true


# Parse command-line options
while [[ $# > 0 ]]; do
    if [[ "$1" == "--path" ]]; then
        shift
        path="$1"
    elif [[ "$1" == "--status" ]]; then
        status=true
    elif [[ "$1" == "--no-status" ]]; then
        status=false
    elif [[ "$1" == "--disk" ]]; then
        disk=true
    elif [[ "$1" == "--no-disk" ]]; then
        disk=false
    elif [[ "$1" == "--full" ]]; then
        full=true
    elif [[ "$1" == "--no-full" ]]; then
        full=false
    elif [[ "$1" == "--logs" ]]; then
        logs=true
    elif [[ "$1" == "--no-logs" ]]; then
        logs=false
    elif [[ "$1" == "--privs" ]]; then
        privs=true
    elif [[ "$1" == "--no-privs" ]]; then
        privs=false
    elif [[ "$1" == "--help" ]]; then
        help
        exit 0
    elif [[ "$1" == "--whatis" ]]; then
        whatis
        exit 0
    elif [[ "$1" == "--version" ]]; then
        version
        exit 0
    else
        node="$1"
    fi
    shift
done

## Drop prefix n, e.g. 'n13' -> '13'
node=$(echo "$node" | sed -E 's/^n//g')

if [[ -z "$node" ]]; then
    help
    mecho
    merror "Argument --node <node number> must be specified, e.g. --node 13"
fi


node_label="n${node}"
echo "# Node ${node}: Post-mortem analysis"
date +"on %Y-%m-%d %H:%M:%S"
echo

echo "## Call"
echo '```sh'
echo "$call"
echo '```'
echo


if [[ "$status" == "true" ]]; then
  echo "## Status"
  echo
  echo "### ping"
  echo '```'
  ping -c 3 ${node_label}
  echo '```'
##  echo
##  echo "### SSH"
##  echo '```'
##  echo "ssh ${node_label} \"echo TRUE\" 2>&"
##  timeout 10s ssh ${node_label} "echo TRUE" 2>&1
##  res="$?"
##  echo "Result: $res"
##  if [[ $res == "124" ]]; then echo "SSH connection timed out"; fi
##  echo '```'
  echo
  echo "### bpstat (Scyld)"
  echo '```'
  bpstat ${node_label}
  echo '```'
  echo
  echo "### pbsnodes (TORQUE)"
  pbsnodes ${node_label}
  echo
fi

if [[ "$privs" == "true" ]]; then
  echo "## Access Privileges and more (Moab)"
  echo
  echo '```'
  grep -v -E "^[ ]*#" /opt/moab/etc/moab.cfg | grep -E "(\[$node_label\]|(=|,|^)$node_label(|,|$)$)"
  echo '```'
  echo
  echo
fi

if [[ "$disk" == "true" ]]; then
  echo "## Local Disk Usage"
  echo
  echo '```'
  bpsh $node df -h /tmp /scratch | sed -E 's| /$| /tmp|'
  echo '```'
  echo
  echo
fi

echo "## Job Summary"
echo "Node name: $node_label"
jids=$(qstat -n -1 -t | grep -F "${node_label}/" | sed -E 's/[.].*//g' | sort -u)
echo "Job IDs:" ${jids}
users=$(qstat -n -1 -t | grep -F "${node_label}/" | sed -E 's/^[^ ]+  //g' | sed -E 's/ .*//g' | sort -u)
echo "Users:" ${users}
emails=
for user in $users; do
  emails="$emails $(grep -E "^$user:" /etc/passwd | cut -d: -f5 | sed -E 's/.*[(](.*)[)]/\1/')"
done
for jid in $jids; do
  emails="$emails $(qstat -f $jid | grep -F "Mail_Users" | sed -E 's/.* = //g')"
done
emails=$(echo $emails | tr ' ' $'\n' | sort -u)
echo "Email addresses: " ${emails}
echo

echo '```'
qstat -n -1 -t | grep -F "${node_label}/"
echo '```'
echo

echo "## Job Details"
echo
for user in ${users}; do
  user_jids=$(qstat -n -1 -t -u ${user} | grep -F "${node_label}/" | sed -E 's/[.].*//g' | sort -u)
  echo "### Jobs by user '$user'"
  for jid in ${user_jids}; do
    echo "#### Job $jid"
    echo '```'
    qstat -f $jid | grep -F "mem"
    echo '```'
    if [[ "$full" == "true" ]]; then
      echo "<details>"  
      echo "<pre>"
      qstat -f $jid
      echo "</pre>"
      echo "</details>"  
      echo
    fi
  done
  echo
done


if [[ "$logs" == "true" ]]; then
  echo "## System Logs"
  echo '```'  
  sudo grep -F " ${node_label} " /var/log/messages | grep -v -F "Accepted publickey" | grep -v -F "Received disconnect" | tail -10
  echo '```'  
  echo
  echo "<details>"
  echo "<pre>"
  sudo grep -F " ${node_label} " /var/log/messages | grep -v -F "Accepted publickey" | grep -v -F "Received disconnect"
  echo "/<pre>"
  echo "</details>"
fi
echo

#!/usr/bin/env bash
### UCSF HPC TIPCC:
### List user processes running on master (head node)
###
### Usage:
###  tipcc-master [options]
###
### Options:
###  --user <user>                Specify user (default: _all_)
###  --me                         Same as '--user \$USER'
###  --filter (none|user|sysadm)  Exclude processes (default: user)
###  --short                      Report also on brief processes (< 30s)
###  --help                       This help
###
### Example:
###  tipcc-master
###  tipcc-master --me
###  tipcc-master --user alice
###
### Version: 0.1.0-9000
### Copyright: Henrik Bengtsson (2016-2017)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"
tool_name=$(basename $0)
if [[ ${TIPCC_TOOLS} -ne 0 ]]; then
    tool_name=${tool_name/-/ }
fi


function mecho() { echo "$@" 1>&2; }

function merror() {
    mecho "ERROR in '${tool_name}': $*"
    exit 1
}

function as_logical() {
    if [[ $1 == "false" || $1 == "0" ]]; then echo 0; else echo 1; fi
}

function help() {
    local res=$(grep -E "^###( .*|)$" $0 | cut -b 5-)
    local search=$(basename $0)
    if [[ "${search}" != "${tool_name}" ]]; then
        res=$(printf '%s\n' "${res[@]}" | sed "s/${search}/${tool_name}/g")
    fi
    printf '%s\n' "${res[@]}"
}

function whatis() {
    local res=$(grep "^### .*[^:][[:space:]]*$" $0 | head -1 | cut -b 5-)
    printf '%s\n' "${res[@]}"
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" $0 | sed 's/###[ ]*Version:[ ]*//g'
}

## Cluster functions
function on_compute_node() {
    pbsnodes ${HOSTNAME} &> /dev/null
    if [[ $? -eq 0 ]]; then echo 1; else echo 0; fi
}

function all_users() {
  cat /etc/passwd | grep -F "/home/" | grep -E "(@|inactive)" | cut -d':' -f1 | sort -u
}

function user_info() {
    local user=$1
    local uid=$(id -u $user)
    local info=$(grep -E "^$user:" /etc/passwd | cut -d: -f5)
    local groups=$(groups $user | sed 's/.*:[ ]*//g')
    echo "$user [$info, UID $uid, GROUPS $groups]:"
}

what="users"
user=_all_
filter=user
short=false

# Parse command-line options
while [[ $# > 0 ]]; do
    if [[ "$1" == "--help" ]]; then
        help
        exit 0
    elif [[ "$1" == "--whatis" ]]; then
        whatis
        exit 0
    elif [[ "$1" == "--version" ]]; then
        version
        exit 0
    elif [[ "$1" == "--himem" ]]; then
        what=himem
    elif [[ "$1" == "--hicpu" ]]; then
        what=hicpu
    elif [[ "$1" == "--user" ]]; then
        shift
        user=$1
    elif [[ "$1" == "--me" ]]; then
        user=${USER}
    elif [[ "$1" == "--short" ]]; then
        short=true
    elif [[ "$1" == "--filter" ]]; then
        shift
        filter=$1
    else
        extras="$extras $1"
    fi
    shift
done


## Assert running on master
if [[ $(on_compute_node) -ne 0 ]]; then
    merror "This command only works on master: ${HOSTNAME}"
fi


if [[ $what == "himem" || $what == "hicpu" ]]; then
    printf "USER\tPID\t%%CPU\t%%MEM\tPROCESS\n"
    
    PATH="$(dirname $0):$PATH"
    bfr=$(tipcc-ps --nodes master | grep -vE "^USER" | awk '{printf "%s\t%s\t%s\t%s\t%s\n", $2, $3, $4, $5, $12}')
    if [[ $what == "himem" ]]; then
	sort_by=4
    elif [[ $what == "hicpu" ]]; then
	sort_by=3
    fi

    printf '%s\n' "${bfr[@]}" | sort --key=${sort_by} -r -n | head -5
    exit 0
fi


## Check all users?
if [[ $user == *","* ]]; then
    mecho "Multiple users: $user"
    users=$(echo ${user} | sed 's/,/ /')
elif [[ $user == *" "* ]]; then
    mecho "Multiple users: $user"
elif [[ ${user} == "_all_" ]]; then
    users=$(all_users)
else
    users=${user}
fi


## Apply filters
function filter_zombies() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E " Z[a-z]? .* <defunct>$")
    printf '%s\n' "${res[@]}"
}

function filter_system() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "^(68|apache|dbus|flexlm|ganglia|mongod|mysql|ntp|postgres|qpidd|rpc|smmsp|tomcat)[ ]+")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(dbus-daemon|dbus-launch)( |:|$)")
    printf '%s\n' "${res[@]}"
}

function filter_shells() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(sh|bash|csh|zsh|tcsh)( |:|$)")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(ssh|ssh-agent|sshd|mosh-server)( |:|$)")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(screen|SCREEN|tmux)( |:|$)")
    printf '%s\n' "${res[@]}"
}

function filter_transfer() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(curl|lftp|rsync|scp|wget)( |:|$)")  
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(sftp-server)( |:|$)")
    ## Thomas Hoffman uses fish:// transfers /HB 2018-08-18
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)([.]fishsrv.pl)( |:|$)")
    printf '%s\n' "${res[@]}"
}

function filter_files() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(ls|cp|du|mv|rm|chmod|chown|tar|gzip|gunzip|bzip2|bunzip2)( |:|$)")
    printf '%s\n' "${res[@]}"
}

function filter_editors() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(emacs|nano|pico|vim)( |:|$)")
    printf '%s\n' "${res[@]}"
}

function filter_viewers() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(head|less|more|tail|groff|grotty)( |:|$)")
    printf '%s\n' "${res[@]}"
}

function filter_mail() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(sendmail|fetchmail|/usr/bin/write)( |:|$)")
    printf '%s\n' "${res[@]}"
}

function filter_scyld() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(bpstat|pbsnodes)( |:|$)")
    printf '%s\n' "${res[@]}"
}

function filter_torque() {
    local res=("${@}")
    ## TORQUE commands
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(qdel|qsub|qstat)( |:|$)")
    ## Queries done by software, e.g. `[sh]`
    res=$(printf '%s\n' "${res[@]}" | grep -v -E " \[.+\]$")
    printf '%s\n' "${res[@]}"
}

function filter_utils() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(tipcc|htop|man|ping|ps|watch|top|mc)( |:|$)")
    printf '%s\n' "${res[@]}"
}

function filter_vcs() {
    local res=("${@}")
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "( |-|/)(git|git-credential-cache--daemon)( |:|$)")
    printf '%s\n' "${res[@]}"
}

function filter_special() {
    local res=("${@}")
    ## System monitoring tools
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "(sadc|sar)( |:|$)")
    ## HB's Cron jobs (calling this method)
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "scan-tipcc_head")
    ## Nextflow (http://www.nextflow.io/)
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "java .* [-]Dcapsule[.]app=nextflow")
    ## speedtest
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "python .*/speedtest-cli")
    printf '%s\n' "${res[@]}"
}

function filter_builds() {
    ## Build R from source
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "/tmp/[a-zA-Z0-9]+/R-.*/R-")
    ## Build Python from source
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "python -m test.regrtest")
    printf '%s\n' "${res[@]}"
}

function filter_short() {
    ## Drop processes reported to have run for '0:00' time
    res=$(printf '%s\n' "${res[@]}" | grep -v -E " 0:[0-2][0-9] ")
    printf '%s\n' "${res[@]}"
}

function filter_works_only_on_master() {
    ## Some tools only work on the master node and not on the interactive (n6) node
    res=$(printf '%s\n' "${res[@]}" | grep -v -E "ascp ")
    printf '%s\n' "${res[@]}"
}

## Query ps + bpstat for _all_ running master-node processes
## Note: master-node process are those without NODE information.
res=$(ps uax | bpstat -P | grep -E "^  " | grep -E -v "^[ ]+root" | sed -E 's/^[ ]*//g' | grep -E -v "($USER|$UID) .* (ps uax|grep -E |.*tipcc head|sed -E)")

if [[ $short == false ]]; then
    res=$(filter_short "${res[@]}")
fi

if [[ $filter == "user" ]]; then
    res=$(filter_zombies "${res[@]}")
    res=$(filter_system "${res[@]}")
    res=$(filter_scyld "${res[@]}")
    res=$(filter_torque "${res[@]}")
    res=$(filter_shells "${res[@]}")
    res=$(filter_files "${res[@]}")
    res=$(filter_transfer "${res[@]}")
    res=$(filter_editors "${res[@]}")
    res=$(filter_viewers "${res[@]}")
    res=$(filter_mail "${res[@]}")
    res=$(filter_vcs "${res[@]}")
    res=$(filter_utils "${res[@]}")
    res=$(filter_special "${res[@]}")
    res=$(filter_works_only_on_master "${res[@]}")
elif [[ $filter == "sysadm" ]]; then
    res=$(filter_zombies "${res[@]}")
    res=$(filter_system "${res[@]}")
    res=$(filter_scyld "${res[@]}")
    res=$(filter_torque "${res[@]}")
    res=$(filter_shells "${res[@]}")
    res=$(filter_files "${res[@]}")
    res=$(filter_transfer "${res[@]}")
    res=$(filter_editors "${res[@]}")
    res=$(filter_viewers "${res[@]}")
    res=$(filter_mail "${res[@]}")
    res=$(filter_vcs "${res[@]}")
    res=$(filter_utils "${res[@]}")
    res=$(filter_special "${res[@]}")
    res=$(filter_builds "${res[@]}")
    res=$(filter_works_only_on_master "${res[@]}")
elif [[ $filter == "core" ]]; then
    res=$(filter_zombies "${res[@]}")
    res=$(filter_system "${res[@]}")
    res=$(filter_scyld "${res[@]}")
    res=$(filter_torque "${res[@]}")
    res=$(filter_shells "${res[@]}")
    res=$(filter_mail "${res[@]}")
elif [[ $filter != "none" ]]; then
    merror "Unknown --filter $filter"
fi


## Nothing to do?
if [[ -z "${res[@]}" ]]; then exit 0; fi


## For each user
for user in ${users}; do
  ## Identify user
  uid=$(id -u $user 2> /dev/null)
  if [[ $? -ne 0 ]]; then
      merror "No such user: $user"
  fi

  ## Keep only those for the user of interest
  res_ii=$(printf '%s\n' "${res[@]}" | grep -E "^($user|$uid) " | grep -v "grep -E \"($user|$uid) \"")

  ## Nothing to do?
  if [[ -z "${res_ii[@]}" ]]; then continue; fi


  ## Display user information
  user_info "$user"
  
  ## Display processes
  pids=$(printf "${res_ii[@]}" | sed -E 's/^[ ]*[^ ]+[ ]+([0-9]+)[ ]+.*/\1/g' | grep -E "[0-9]+")
  pids="${pids[@]}"
  printf "PIDs (on master): "
  echo ${pids}
  ps uax | bpstat -P | head -1 | sed -E 's/^NODE[ ]*//g'
  printf '%s\n' "${res_ii[@]}"

  echo
done

#!/usr/bin/env bash

###################################################################
# Author: Henrik Bengtsson <hb@biostat.ucsf.edu>
#
# Description:
# Sets up the PATH to use the most recent versions of software
# installed by different users.
#
# Usage:
# Add the following command to your ~/.bashrc script:
#   source /home/shared/cbc/bashrc
###################################################################

# Setup SHARED_ROOT
if test -z "${SHARED_ROOT}"; then
  export SHARED_ROOT=
  for dd in /home/shared/cbc; do
    if test -d ${dd}; then
      export SHARED_ROOT=${dd}
      break
    fi
  done
fi
## echo SHARED_ROOT=${SHARED_ROOT}


# Useful functions
source ${SHARED_ROOT}/bin/includes.bash


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Record original PATH and setup PATH depending on system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if test "${PATH_SYSTEM}" == ""; then
  export PATH_SYSTEM=${PATH}
fi
export PATH=${PATH_SYSTEM}

# Added ~/bin/
if ! test -d "${HOME}/bin"; then
  mkdir ${HOME}/bin
fi
appendPath ${HOME}/bin

export HOST=`uname -n`
export HOST_SHORT=${HOST/.*/}
export ARCH=`uname -m`
export ISCOMPUTENODE=0
if [[ ${HOST_SHORT} =~ n[0-9]{1,2} ]]; then
  export ISCOMPUTENODE=1
fi
## echo ISCOMPUTENODE=$ISCOMPUTENODE


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# SETUP COMPUTE NODES
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export CLUSTER_SCHEDULER="TORQUE"
export CLUSTER_HEADNODE="cclc01"
export CLUSTER_NODES="n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 n12 n13 n14 n15 n17 n18 n19 n20 n21 n22 n23 n24 n25 n26 n27"


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Personalized temporary and scrattch directory
# (e.g. cleaner /tmp/ directory on cluster)
# Acknowledged by e.g. R
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export TMPDIR=/tmp/$USER
if ! test -d "$TMPDIR"; then
  mkdir -p "$TMPDIR"
fi

export VARTMPDIR=/var/tmp/$USER
if ! test -d "$VARTMPDIR"; then
  mkdir -p "$VARTMPDIR"
fi

# Create /scratch/$USER/shared/ (only on compute nodes)
if test $ISCOMPUTENODE == 1; then
  export SCRATCHDIR=/scratch/$USER
  if ! test -d "$SCRATCHDIR"; then
    mkdir -p "$SCRATCHDIR"
  fi
fi



# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Cluster tools
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
alias ganglia='lynx -accept_all_cookies http://localhost/ganglia/'
#alias gmem='free -g | echo "      `head -1`"; gsh free -g | egrep -e "Mem"'
alias gswap='free -g | echo "      `head -1`"; gsh free -g | egrep -e "Swap"'
alias gmem='gsh vmstatmem'
alias topme='top -U ${USER}'
alias htopme='htop -u ${USER}'
alias psme='ps -ef | grep ${USER}'


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Misc
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Never use /usr/libexec/openssh/gnome-ssh-askpass
unset SSH_ASKPASS

# htop (system tools)
prependPath ${SHARED_SOFTWARE}/htop


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Python
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##prependPath /opt/local/bin # Python 2.6.5
prependPath ${SHARED_SOFTWARE}/Python-2.7.4/bin
# Anaconda [https://store.continuum.io/cshop/anaconda/],
# which includes Python
prependPath /home/shared/cbc/software_cbc/anaconda/bin


PYTHON_VERSION=$(python -c 'import sys; print("%s.%s" % (sys.version_info[0], sys.version_info[1]));')
PYTHON_HOME=$(which python)

if test "${PYTHONPATH_SYSTEM}" == ""; then
  export PYTHONPATH_SYSTEM=${PYTHONPATH}
fi
export PYTHONPATH=${PYTHONPATH_SYSTEM}

# Add user-specific Python binaries
dir=${HOME}/.local/bin
if ! test -d "${dir}"; then
  mkdir -p "${dir}"
fi
export PYTHONPATH=${dir}:${PYTHONPATH}
prependPath ${dir}

# Add site-wide Python packages
if test "${PYTHON_VERSION}" == "2.6"; then
  PYTHON_SITE=/opt/local/lib/python2.6/site-packages
else
  PYTHON_SITE=$(dirname $(dirname $PYTHON_HOME))/lib/python${PYTHON_VERSION}
fi
export PYTHONPATH=${PYTHONPATH}:${PYTHON_SITE}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# SHARED SOFTWARE
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Fix path
prependPath ${SHARED_SOFTWARE}/jdk-latest/bin
prependPath ${SHARED_SOFTWARE}/BamUtil-latest/bamUtil/bin
prependPath ${SHARED_SOFTWARE}/bedops-latest/bin
prependPath ${SHARED_SOFTWARE}/BEDTools-latest/bin
prependPath ${SHARED_SOFTWARE}/blast-latest
prependPath ${SHARED_SOFTWARE}/bowtie2-latest
prependPath ${SHARED_SOFTWARE}/bwa-latest
prependPath ${SHARED_SOFTWARE}/Control-FREEC-latest/bin
prependPath ${SHARED_SOFTWARE}/cufflinks-latest
prependPath ${SHARED_SOFTWARE}/FastQC-latest
prependPath ${SHARED_SOFTWARE}/GeneTorrent-latest/bin
prependManPath ${SHARED_SOFTWARE}/GeneTorrent-latest/share/man
prependPath ${SHARED_SOFTWARE}/HTSeq-latest/scripts
prependPath ${SHARED_SOFTWARE}/matlab-latest/bin
prependPath ${SHARED_SOFTWARE}/R-latest/bin
prependPath ${SHARED_SOFTWARE}/sratoolkit-latest/bin
prependPath ${SHARED_SOFTWARE}/samtools-latest
prependPath ${SHARED_SOFTWARE}/bcftools-latest
prependPath ${SHARED_SOFTWARE}/tophat-latest
prependPath ${SHARED_SOFTWARE}/valgrind-latest/coregrind
prependPath ${SHARED_SOFTWARE}/vcftools-latest/bin
prependPath ${SHARED_SOFTWARE}/wordspy-latest
prependPath ${SHARED_ROOT}/bin
prependPath ${SHARED_ROOT}/local/bin


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Docker-ish
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
prependPath ${SHARED_SOFTWARE}/udocker-latest


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Git
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Remove alias 'git', iff set
alias git=foo
unalias git
# Add  git installation
## prependPath /opt/rh/devtoolset-2/root/usr/bin/
prependPath /opt/Git/Git-latest/bin
prependPath ${SHARED_SOFTWARE}/gitflow-0.4.2/bin


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ruby
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
prependPath ${SHARED_SOFTWARE}_cbc/bin


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# GENOMIC TOOLS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
prependPath ${SHARED_SOFTWARE}/IGVTools-latest
prependPath ${SHARED_SOFTWARE}/IGV-latest

alias igv=${SHARED_SOFTWARE}/IGV-latest/igv.sh
export PICARD_HOME=${SHARED_SOFTWARE}/picard-tools-latest
export GATK_HOME=${SHARED_SOFTWARE}/GATK-latest

prependPath ${SHARED_SOFTWARE}/htslib-latest/bin
export HTSLIB_HOME=/home/shared/cbc/software/htslib-latest


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Development, e.g. gcc
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#prependPath /opt/llvm/llvm-3.5.0/bin
export GCC_HOME=/opt/gcc/gcc-4.9.2
if test -d "${GCC_HOME}"; then
    prependPath ${GCC_HOME}/bin
    export LD_LIBRARY_PATH="${GCC_HOME}/lib64:${LD_LIBRARY_PATH}"
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# R
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if test "${PKG_LIBS0}" = ""; then
  export PKG_LIBS0="${PKG_LIBS}"
else
  export PKG_LIBS="${PKG_LIBS0}"
fi

# Fixes "/usr/bin/ld: cannot find -lgfortran" error when
# building package that needs libgfortran.
# FIXME: Should this be configured already when building R, i.e.
#        in /home/shared/cbc/bin/installR? /HB 2015-01-10
if test -d "${GCC_HOME}"; then
  export PKG_LIBS="${PKG_LIBS} -L${GCC_HOME}"
fi

## 'nc-config' needs to be on the PATH in order to install R package ncdf4
appendPath /opt/NetCDF/NetCDF-4.3.0/bin

## Setup R_LIBS locally for user and machine type
# Get the OS type in lower case
#ostype=`uname -s | tr '[A-Z]' '[a-z]'`
#export R_LIBS=${HOME}/R/${ostype}/library/
#if ! test -d "${R_LIBS}"; then
#  mkdir -p ${R_LIBS}
#fi

## WORKAROUND: Some packages are hard/fail to install in R 3.2.0, e.g. 'png'.
## These are shared by CBC.
export R_LIBS_SITE=/home/shared/cbc/R/site-library/%p-library/%v


alias R-2.15.3=${SHARED_SOFTWARE}/R-2.15.3/bin/R
alias R-3.0.0=${SHARED_SOFTWARE}/R-3.0.0/bin/R
alias R-3.0.1=${SHARED_SOFTWARE}/R-3.0.1/bin/R
alias R-3.0.2=${SHARED_SOFTWARE}/R-3.0.2/bin/R
alias R-3.0.3=${SHARED_SOFTWARE}/R-3.0.3/bin/R
alias R-3.1.0=${SHARED_SOFTWARE}/R-3.1.0/bin/R
alias R-3.1.1=${SHARED_SOFTWARE}/R-3.1.1/bin/R
alias R-3.1.2=${SHARED_SOFTWARE}/R-3.1.2/bin/R
alias R-3.1.3=${SHARED_SOFTWARE}/R-3.1.3/bin/R
alias R-3.2.0=${SHARED_SOFTWARE}/R-3.2.0/bin/R
alias R-3.2.1=${SHARED_SOFTWARE}/R-3.2.1/bin/R
alias R-3.2.2=${SHARED_SOFTWARE}/R-3.2.2/bin/R
alias R-latest=${SHARED_SOFTWARE}/R-latest/bin/R
alias R-patched=${SHARED_SOFTWARE}/R-patched/bin/R
alias R-devel=${SHARED_SOFTWARE}/R-devel/bin/R
alias useR=". ${SHARED_ROOT}/bin/useR"


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Cloud tools
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Dropbox
prependPath ${SHARED_SOFTWARE}/.dropbox-dist
prependPath ${SHARED_SOFTWARE}/dropbox-cli
alias dropbox="python ${SHARED_SOFTWARE}/dropbox-cli/dropbox.py"

# s3cmd (Amazon AWS S3)
prependPath ${SHARED_SOFTWARE}/s3cmd-latest
alias s3cmd=${SHARED_SOFTWARE}/s3cmd-latest/s3cmd

# Mirror website
alias wmirror="wget --no-host-directories --recursive --no-parent --reject='index.html*'"



# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# BUILDS
#
# ./configure --prefix=${SHARED_ROOT}/local/
# make
# make install
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export CPPFLAGS="-I${SHARED_ROOT}/local/include $CPPFLAGS"
export LDFLAGS="-L${SHARED_ROOT}/local/lib $LDFLAGS"


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default editor for 'svn commit' and others
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if test "${EDITOR}" = ""; then
  export EDITOR="emacs -nw"
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create aliases 'n0, 'n1', etc. to ssh into corresponding node 
# preserving the current working directory.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export QNODES=`qnodes | grep "^n[0-9][0-9]*"`
for n in ${QNODES}; do
  cmd="alias $n='pwd=\$(pwd); ssh -Y -t $n \"cd \$pwd; $SHELL\"'"
#  echo $cmd
  eval $cmd
done


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Convenient ways of listing files
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
alias ll="ls -l"
alias lll="ls -la"



# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# SECURITY: Assert file permissions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
assertUserOnlyPermissions ${HOME}/.ssh
assertUserOnlyPermissions ${HOME}/.ssh/authorized_keys
assertUserOnlyPermissions ${HOME}/.netrc
assertUserOnlyPermissions ${HOME}/.pine-passfile
assertUserOnlyPermissions ${HOME}/cron-bin/ucsf_mail_fetch_keep


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Personal public_html
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Only on head node
if test $ISCOMPUTENODE == 0; then
# Create users ~/public_html, iff missing
## if ! test -d "${HOME}/public_html"; then
##   mkdir "${HOME}/public_html"
##   t=${HOME}/public_html/README.txt
##   echo "The content in your ~/public_html/ directory can be accessed" > ${t}
##   echo "via the web using address http://cclc01.som.ucsf.edu/~${USER}/." >> ${t}
##   echo "You can use this to setup your own internal webpage and/or" >> ${t}
##   echo "result files (e.g. HTML, PDF) from jobs easily accessible." >> ${t}
##   echo "" >> ${t}
##   echo "SECURITY: To access your web content from outside the UCSF" >> ${t}
##   echo "login via the UCSF VPN, e.g. http://cbc.ucsf.edu/vpn/" >> ${t}
##   chmod go-rwx ${t}
## 
##   t=${HOME}/public_html/index.html
##   echo "<html>" > ${t}
##   echo "<head>" >> ${t}
##   echo " <title>${USER}</title>" >> ${t}
##   echo "</head>" >> ${t}
##   echo "<body>" >> ${t}
##   echo "<h1>${USER}</h1>" >> ${t}
##   echo "Hello world!" >> ${t}
##   echo "</body>" >> ${t}
##   echo "</html>" >> ${t}
## fi

  # Check file permissions
  if test -d "${HOME}/public_html"; then
    check-public_html
  fi
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# LG3 Exome Pipeline
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export LG3_HOME=/home/henrik/projects/CostelloJ_2014-LG3-Exome-Pipeline/pbs


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Odds and ends
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# gource - https://code.google.com/p/gource/
alias gource="LD_LIBRARY_PATH=$SHARED_LOCAL/lib64 gource"

###################################################################
# HISTORY:
# 2014-05-05
# o Added cran().
# 2012-04-28
# o Extracted and shared.
###################################################################

#!/usr/bin/env bash
### UCSF C4 Toolkit:
### Cluster status summary
###
### Usage:
###  c4-status [options]
###
### Options:
###  --full              Output more details
###  --help              This help
###
### Example:
###  c4-status
###
### Version: 0.1.0-9000
### Copyright: Henrik Bengtsson (2016-2017)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"
tool_name=$(basename $0)
if [[ ${C4_TOOLS} -ne 0 ]]; then
    tool_name=${tool_name/-/ }
    shift
fi

function mecho() { echo "$@" 1>&2; }

function merror() {
    mecho "ERROR in '${tool_name}': $*"
    exit 1
}

function as_logical() {
    if [[ $1 == "false" || $1 == "0" ]]; then echo 0; else echo 1; fi
}

function help() {
    local res=$(grep -E "^###( .*|)$" $0 | cut -b 5-)
    local search=$(basename $0)
    if [[ "${search}" != "${tool_name}" ]]; then
        res=$(printf '%s\n' "${res[@]}" | sed "s/${search}/${tool_name}/g")
    fi
    printf '%s\n' "${res[@]}"
}

function whatis() {
    local res=$(grep "^### .*[^:][[:space:]]*$" $0 | head -1 | cut -b 5-)
    printf '%s\n' "${res[@]}"
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" $0 | sed 's/###[ ]*Version:[ ]*//g'
}

## Cluster functions
function on_compute_node() {
    pbsnodes ${HOSTNAME} &> /dev/null
    echo $?
}


full=0

# Parse command-line options
while [[ $# > 0 ]]; do
    if [[ "$1" == "--help" ]]; then
        help
        exit 0
    elif [[ "$1" == "--whatis" ]]; then
        whatis
        exit 0
    elif [[ "$1" == "--version" ]]; then
        version
        exit 0
    elif [[ "$1" == "--full" ]]; then
        full=1
    else
        extras="$extras $1"
    fi
    shift
done


echo "# Cluster status"
echo
echo "## Nodes"
echo
echo "### According to 'bpstat' (Scyld)"
bpstat
echo
echo "### According to 'pbsnodes' (TORQUE)"
pbsnodes -l
echo
pbsnodes | grep -q -F "ERROR" > /dev/null
if [[ $? -eq 0 ]]; then
  tput setaf 1 2> /dev/null ## red
  echo "## ERROR: Problematic nodes"
  pbsnodes | grep -B 7 -A 2 -F "ERROR" | grep -E "^(n[0-9]+|[[:space:]]+status = )"
  tput sgr0 2> /dev/null    ## reset
  echo
fi

echo "## Disk space"
df -h | grep -E "(Filesystem| /home| /data| /work)"
echo
echo "## Job scheduler"
echo
echo "### Moab"
if [[ $(on_compute_node) -eq 0 ]]; then
    echo "Moab status: <only available from master, not from ${HOSTNAME}>"
else
    PATH="/sbin:$PATH"  ## AD HOC: 'service' might not be on PATH
    echo "Moab status: $(service moab status)"
fi
echo
echo "### TORQUE / PBS"
echo
if [[ $(on_compute_node) -eq 0 ]]; then
  echo "PBS Server: <only available from master, not from ${HOSTNAME}>"
  echo "PBS Authentication Daemon: <only available from master, not from ${HOSTNAME}>"
else
  echo "PBS Server: $(service pbs_server status)"
  echo "PBS Authentication Daemon: $(service pbs_trqauthd status)"
fi
echo "PBS Queue:"
jobs=$(qstat | grep -E "^[0-9]+")
jobsx=$(qstat -t | grep -E "^[0-9]+")
echo "Number of jobs: $(echo "${jobs[0]}" | wc -l) ($(echo "${jobs[0]}" | grep -F ' R ' | wc -l) running, $(echo "${jobs[0]}" | grep -F ' Q ' | wc -l) queued)"
echo "Number of individual jobs: $(echo "${jobsx[0]}" | wc -l) ($(echo "${jobsx[0]}" | grep -F ' R ' | wc -l) running, $(echo "${jobsx[0]}" | grep -F ' Q ' | wc -l) queued)"
echo "Number of users: $(echo "${jobs[0]}" | awk '{ print $3 }' | sort -u | wc -l)"

echo
echo "## Uptime and vmstat"
echo "$HOSTNAME: $(uptime)"
vmstat | sed 's/free/ free/' | sed 's/cache/   cache/' | sed 's/-memory-/---memory---/'
if [[ "$full" != "0" ]]; then
  vmstat -s -S M
fi
 
    
if [[ $(on_compute_node) -ne 0 ]]; then
    echo
    echo "### High-memory processes"
    C4_TOOLS=0 c4-head --himem
    echo
    echo "### High-CPU processes"
    C4_TOOLS=0 c4-head --hicpu
    echo
fi

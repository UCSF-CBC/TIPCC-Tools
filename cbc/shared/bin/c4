#!/usr/bin/env bash
### Computational Biology Core (http://cbc.ucsf.edu) C4 Toolkit
###
### Usage:
###  c4 <command> [options]
###
### Examples:
###  c4 status              - Cluster status
###  c4 nodes               - List nodes that are up
###  c4 user                - Detailed user information
###  c4 users               - List all users
###  c4 ps --node head      - List all processes on the head node
###  c4 ps --node n6        - List all processes on node n6
###  c4 head                - List users' usage of head node
###  c4 disk_usage          - Summarize a user's disk usage
###  c4 delete_sam_with_bam - Delete SAM files with existing (newer) BAM file
###
### How to install:
### Add the following to your ~/.bashrc script:
###  source ${SHARED_ROOT}/bashrc
call="$0 $*"
args="$*"
tool_name=$(basename $0)

#if [[ -z "$SHARED_SOFTWARE" ]]; then
#  source /home/shared/cbc/bashrc
#fi


function mecho() { echo "$@" 1>&2; }

function merror() {
    mecho "ERROR in '${tool_name}': $*"
    exit 1
}

function as_logical() {
    if [[ $1 == "false" || $1 == "0" ]]; then echo 0; else echo 1; fi
}

function help() {
    local res=$(grep -E "^###( .*|)$" $0 | cut -b 5-)

    ## Substitutions
    res=$(printf '%s\n' "${res[@]}" | sed -e "s#\${SHARED_ROOT}#$SHARED_ROOT#g")

#    local search=$(basename $0)
#    if [[ "${search}" != "${tool_name}" ]]; then
#        res=$(printf '%s\n' "${res[@]}" | sed "s/${search}/${tool_name}/g")
#    fi
    printf '%s\n' "${res[@]}"
}

function whatis() {
    local res=$(grep "^### .*[^:][[:space:]]*$" $0 | head -1 | cut -b 5-)
    printf '%s\n' "${res[@]}"
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" $0 | sed 's/###[ ]*Version:[ ]*//g'
}

function on_compute_node() {
    pbsnodes ${HOSTNAME} &> /dev/null
    echo $?
}

function user_info() {
    local user=$1
    local uid=$(id -u $user)
    local info=$(grep -E "^$user:" /etc/passwd | cut -d: -f5)
    local groups=$(groups $user | sed 's/.*:[ ]*//g')
    echo "$user [$info, UID $uid, GROUPS $groups]:"
}

cmd=$1
if [[ "$cmd" == "" ]]; then
    cmd="help"
fi

shift

HEAD_NODE="cclc01.som.ucsf.edu"
CLUSTER_NODES=$(bpstat -l | tail -n +2 | cut -c 1-4 | sed -e 's/ //g')
CLUSTER_NODES_UP=$(bpstat -l | tail -n +2 | grep -F up | cut -c 1-4 | sed -e 's/ //g')
CLUSTER_NODES_DOWN=$(bpstat -l | tail -n +2 | grep -F down | cut -c 1-4 | sed -e 's/ //g')

TMPDIR=/tmp/$USER/.c4
mkdir -p $TMPDIR

dryrun=FALSE
all=FALSE
full=FALSE
force=FALSE
verbose=FALSE
clean=FALSE
class=
action=

## All nodes that are up
nodes=
for n in $CLUSTER_NODES_UP; do nodes="$nodes n$n"; done

## Identify all users on the cluster
users=($(cat /etc/passwd | grep -F "/home/" | grep -E "(@|inactive)" | cut -d':' -f1 | sort -u))

extras=
while [[ $# > 0 ]]; do
    if [[ "$1" == "--nodes" ]]; then
        shift
        nodes=$1
    elif [[ "$1" == "--node" ]]; then
        shift
        nodes=$1
    elif [[ "$1" == "--users" ]]; then
	shift
	users=($(echo $1 | sed 's/,/ /g'))
	all=TRUE
    elif [[ "$1" == "--user" ]]; then
	users=($(echo $2 | sed 's/,/ /g'))
	shift
    elif [[ "$1" == "--me" ]]; then
	users=($USER)
	shift
    elif [[ "$1" == "--all" ]]; then
	all=TRUE
    elif [[ "$1" == "--clean" ]]; then
	clean=TRUE
    elif [[ "$1" == "--class" ]]; then
	shift
        class=$1
    elif [[ "$1" == "--action" ]]; then
        shift
        action=$1
    elif [[ "$1" == "--full" ]]; then
        full=TRUE
    elif [[ "$1" == "--verbose" ]]; then
        verbose=TRUE
    elif [[ "$1" == "--dry-run" ]]; then
        dryrun=TRUE
    elif [[ "$1" == "--force" ]]; then
        force=TRUE
    else
	extras="$extras $1"
    fi
    shift
done

export C4_TOOLS=1
subcmd="${tool_name}-${cmd}"
PATH="$(dirname $0):$PATH"

if [[ $cmd == "help" ]]; then
    help
    exit 0
elif [[ $cmd == "status" ]]; then
    C4_TOOLS=0 c4-status
elif [[ $cmd == "nodes" ]]; then
    echo "Cluster nodes (that are up): $(echo $CLUSTER_NODES_UP)"
elif [[ $cmd == "checknodes" ]]; then
    echo "Cluster nodes: $(echo $CLUSTER_NODES)"
    echo "Cluster nodes (that are up): $(echo $CLUSTER_NODES_UP)"
    echo "Cluster nodes (that are down): $(echo $CLUSTER_NODES_DOWN)"    
    for node in $CLUSTER_NODES; do
	printf "Node n$node: "
	status=$(/opt/moab/bin/checknode n$node | grep State: | sed 's/State: *//g')
	echo "$status"
    done
elif [[ $cmd == "users" ]]; then
    if [[ $clean == "TRUE" ]]; then
      echo "${users[@]}"
    else
      echo "Cluster users: [n=${#users[@]}] ${users[@]}"
    fi
elif [[ $cmd == "disk_usage" ]]; then
    if [[ ${#users[@]} -gt 1 && "$all" == "FALSE" ]]; then
	merror "Did you forget --me or --user <user>?  If you wish to apply for multiple users, please confirm by specifying --all"
    fi
    for user in ${users[@]}; do
      user_info "$user"
      for path in $(eval echo ~$user) /data/$user/ /work/$user/; do
	  if [[ -d $path ]]; then
	      du -sh $path
	  fi
      done
      echo
    done
elif [[ $cmd == "find_sam_with_bam" ]]; then
    echo "Searching for SAM files with a newer BAM files"
    echo "Path (recursively): $(pwd)"
    find . -type f -iname "*.sam" | sort -u > $TMPDIR/sam.txt
    ## Any SAM files found
    if [[ -s $TMPDIR/sam.txt ]]; then
      find . -type f -iname "*.bam" | sed 's/[.]bam$/.sam/g' | sort -u > $TMPDIR/bam_sam.txt
      files=$(comm -1 -2 $TMPDIR/sam.txt $TMPDIR/bam_sam.txt)
      rm $TMPDIR/sam.txt $TMPDIR/bam_sam.txt
      sams=()
      for sam in $files; do
  	bam=${sam/sam/bam}
  	if [[ -f "$bam" && "$bam" -nt "$sam" ]]; then
  	    sams=($sams $sam)
  	fi
      done
      if [[ ${#sams[@]} -gt 0 ]]; then
          echo
  	for sam in $sams; do
              if [[ $full == "TRUE" ]]; then
                  bam=${sam/sam/bam}
  	        ls -rtl --time-style=long-iso $sam $bam
  	    else
  	      echo $sam
  	    fi
  	    if [[ $action == "delete" ]]; then
  echo	      rm "$sam"
  	    fi
  	done
          if [[ $action != "delete" ]]; then
  	    echo
              echo "Use '--action delete' to delete these"
          fi
      else
        echo "No SAM files with matching BAM files found."
      fi
    else
      echo "No SAM files found."
    fi
    echo
elif [[ $cmd == "large_files" ]]; then
    if [[ ${#users[@]} -gt 1 && "$all" == "FALSE" ]]; then
	merror "Did you forget --me or --user <user>?  If you wish to apply for multiple users, please confirm by specifying --all"
    fi
    echo "Cluster users: [n=${#users[@]}] ${users[@]}"

    exts=()
    if [[ "$class" == "htseq" ]]; then
	exts=("pileup" "mpileup" "fastq" "fq" "sam")
    elif [[ "$class" == "text" ]]; then
	exts=("txt")
    else
	merror "--class <class> is missing."
    fi

    minsize=50000k
    minsize=500
    opts="-size +$minsize"
    
    echo "File extensions considered: ${exts[@]}"
    opts="$opts -name 'DUMMY_DUMMY_DUMMY'"
 #   for ext in ${exts[@]}; do
#	opts="$opts -o -name '*.$ext'"
 #   done


    if [[ "$action" == "list" ]]; then
        echo "find options: $opts"
        find . -type f ${opts} -exec ls -lh {} \; | awk '{ print $9 ": " $5 " (" $6 " " $7 " " $8 ")" }'
#        find . -type f $opts -exec ls -lh {} \; | awk '{ print $9 ": " $5 " (" $6 " " $7 " " $8 ")" }'
    elif [[ "$action" == "gzip" ]]; then
        echo "find options: $opts"
        find . -type f $opts ! -f '*.gz' -exec gzip
    else
	merror "--action <action> is missing."
    fi
elif [[ $cmd == "apply" ]]; then
    echo "Nodes to be called: $(echo $nodes)"
    node_cmd="$extras"
    echo "Command applied to each node: '$node_cmd'"
    if [[ -z "$node_cmd" ]]; then
      merror "Missing command to be called on each node"
    fi
    for node in $nodes; do
	echo NODE $node:
	call="ssh $node $node_cmd"
	echo $call
	if [[ "$dryrun" != "TRUE" ]]; then $call; fi
	echo
    done
elif [[ $cmd == "sync-to-scratch" ]]; then
    srcdir=$(eval echo ~$USER)/cluster/scratch/
    destdir=/scratch/$USER/

    if [[ $(on_compute_node) -ne 0 ]]; then
	merror "Trying to sync $srcdir to local disk on the head node."
    fi

    if [[ ! -d "$srcdir" ]]; then
	echo "WARNING: Cannot sync $srcdir to $destdir on local disk on compute node $HOST, because source directory does not exist. Skipping."
	exit 1
    fi

    mkdir -p $destdir

    xopts=
    if [[ "$dryrun" == "TRUE" ]]; then
	xopts="$xopts --dry-run";
    fi
    
    call="rsync -vLropgtD --delete --exclude='*~' --exclude='*.bak' --exclude='*.log' --exclude='*.out' --exclude='*.err' --exclude='*.logs/' --exclude='*.HIDE*/' --exclude=downloads/ --exclude=.async/ $xopts $srcdir $destdir"
    echo "Node: $HOST"
    echo "Command: $call"
    $call
elif [[ $cmd == "software" ]]; then
  echo "** Software in $SHARED_SOFTWARE/:"
  ls $SHARED_SOFTWARE | grep -v "~$"
elif [[ $cmd == "utils" ]]; then
  echo "** Command-line utilities in $SHARED_BIN/:"
  ls $SHARED_BIN | grep -v "~$"
elif [[ $cmd == "aliases" ]]; then
  echo "** Aliases set by $SHARED_ROOT/bashrc:"
  grep "^alias" $SHARED_ROOT/bashrc | grep -v "alias git" | sort -u
elif [[ $cmd == "functions" ]]; then
  echo "** Functions defined in bashrc and bin/* in $SHARED_ROOT/:"
  cat $SHARED_ROOT/bashrc $SHARED_BIN/* | grep "^function" | sed 's/ {//g' | sort -u
  echo
  echo "To see a function definition, use type <fcn>, e.g. type timestamp"
elif [[ $cmd == "envvars" ]]; then
  echo "** Environment variable set by $SHARED_ROOT/bashrc:"
  grep "^export" $SHARED_ROOT/bashrc | cut -b 8- | cut -d = -f 1 | sort -u
elif [[ $cmd == "motd" ]]; then
  cat /etc/motd
else
    which "${subcmd}" &> /dev/null
    if [[ $? -ne 0 ]]; then
	merror "No such command: '${tool_name} ${cmd}'"
    fi
    export C4_TOOLS=1
    ${subcmd} ${args}
    res=$?
    export C4_TOOLS=
    exit ${res}
fi

export C4_TOOLS=

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# HISTORY:
# 2015-06-24
# o Added --cluster
# 2014-12-23
# o Added --motd
# 2014-10-06
# o Added --functions
# 2014-10-05
# o Created by Henrik Bengtsson.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
